
/////                                                  \\\\\
///// IDS/2DA changes                                  \\\\\
/////                                                  \\\\\

// expanded IDS entries; included as libraries so other modders can nab them
INCLUDE ~%MOD_FOLDER%/lib/bg2fixpack/ids_entries_animate.tph~
INCLUDE ~%MOD_FOLDER%/lib/bg2fixpack/ids_entries_anisnd.tph~
INCLUDE ~%MOD_FOLDER%/lib/bg2fixpack/ids_entries_gtimes.tph~
INCLUDE ~%MOD_FOLDER%/lib/bg2fixpack/ids_entries_shoutids.tph~
// INCLUDE ~%MOD_FOLDER%/lib/bg2fixpack/ids_entries_specific.tph~ // no one was happy with these entries
INCLUDE ~%MOD_FOLDER%/lib/bg2fixpack/ids_entries_spell.tph~

COPY_EXISTING ~damages.ids~ ~override~
  REPLACE_TEXTUALLY ~^0x0001 \(.+\)$~ 
~IDS V1.0
0x0001 \1~
  UNLESS ~^IDS V1\.0~

COPY_EXISTING ~happy.ids~ ~override~
  REPLACE_TEXTUALLY ~^-300 \(.+\)$~
~IDS V1.0
-300 \1~
  UNLESS ~^IDS V1\.0~

ACTION_IF NOT FILE_EXISTS_IN_GAME ~moraleai.ids~ THEN BEGIN
  COPY ~bg2fixpack/ids/moraleai.ids~ ~override~
END

COPY_EXISTING ~slots.ids~    ~override~
              ~soundoff.ids~ ~override~
  REPLACE_TEXTUALLY ~^0 \(.+\)$~ 
~IDS V1.0
0 \1~
  UNLESS ~^IDS V1\.0~

COPY_EXISTING ~state.ids~ ~override~
  REPLACE_TEXTUALLY ~^0x00000000 \(.+\)$~
~IDS V1.0
0x00000000 \1~
  UNLESS ~^IDS V1\.0~

// adds custom IsValidForPartyDialogue state
APPEND ~STATE.IDS~
  ~0x80101FEF CD_STATE_NOTVALID~
  UNLESS ~CD_STATE_NOTVALID~

// Due to there being a limit to the size of songlist.2da it has become common
// practice to replace the 0th entry with a blank song and then run a wav instead. mus file below.
COPY_EXISTING ~songlist.2da~ ~override/songlist.2da~
  SET_2DA_ENTRY 2 1 2 ~G3Blank~
  SET_2DA_ENTRY 2 2 2 ~G3Blank.mus~

/*
areas with non-conventional naming convention:
ar0021 - assigned ar0004.bcs (DNE), ar0021.bcs also DNE
ar0315 - assigned ar0006.bcs (DNE), ar0315.bcs also DNE
ar0316 - assigned ar0007.bcs (DNE), ar0316.bcs also DNE
ar0518 - assigned ar0517.bcs, ar0518.bcs DNE.
ar0519 - assigned ar0517.bcs, ar0519.bcs DNE.
ar0520 - assigned ar0517.bcs, ar0520.bcs DNE.
ar0521 - assigned ar0517.bcs, ar0521.bcs DNE.
  Fine; ar0517 - ar0521 are all planar prison sinkhole traps and area script just has a DisplayString head
ar0707 - assigned ar0003.bcs (DNE), ar0707.bcs also DNE
ar1107 - assigned ar1102.bcs, ar1107.bcs also exists
  ar1102 and ar1107 are the ranger cabin, pre- and post-stronghold. ar1107 jus moves globals from ar1102, so this should be fine
ar1603 - assigned ar0001.bcs (DNE), ar1603.bcs also DNE
ar1604 - assigned ar0609.bcs (DNE), ar1604.bcs also DNE
  copied from ar0609 in BG
ar1612 - assigned ar0005.bcs (DNE), ar0612.bcs also DNE
ar2001 - assigned ar0001.bcs (DNE) but ar2001.bcs is leftover from BG
*/

// assigns area scripts to areas with none assigned
COPY_EXISTING ~ar0061.are~ ~override~
              ~ar0082.are~ ~override~
              ~ar0086.are~ ~override~
              ~ar0206.are~ ~override~
              ~ar0302.are~ ~override~
              ~ar0303.are~ ~override~
              ~ar0305.are~ ~override~
              ~ar0306.are~ ~override~
              ~ar0310.are~ ~override~
              ~ar0331.are~ ~override~
              ~ar0332.are~ ~override~
              ~ar0333.are~ ~override~
              ~ar0335.are~ ~override~
              ~ar0412.are~ ~override~
              ~ar0503.are~ ~override~
              ~ar0504.are~ ~override~
              ~ar0509.are~ ~override~
              ~ar0527.are~ ~override~
              ~ar0528.are~ ~override~
              ~ar0712.are~ ~override~
              ~ar0713.are~ ~override~
              ~ar0714.are~ ~override~
              ~ar0805.are~ ~override~
              ~ar0806.are~ ~override~
              ~ar0807.are~ ~override~
              ~ar0810.are~ ~override~
              ~ar0811.are~ ~override~
              ~ar0812.are~ ~override~
              ~ar0813.are~ ~override~
              ~ar1010.are~ ~override~
              ~ar1101.are~ ~override~
              ~ar1103.are~ ~override~
              ~ar1201.are~ ~override~
              ~ar1203.are~ ~override~
              ~ar1610.are~ ~override~
              ~ar2014.are~ ~override~
              ~ar2015.are~ ~override~
              ~ar2016.are~ ~override~
              ~ar2018.are~ ~override~
              ~ar2210.are~ ~override~
              ~ar2810.are~ ~override~
              ~ar2811.are~ ~override~
              ~ar3003.are~ ~override~
              ~ar3006.are~ ~override~
              ~ar3010.are~ ~override~
              ~ar3014.are~ ~override~
              ~ar3018.are~ ~override~
              ~ar3022.are~ ~override~
              ~ar5501.are~ ~override~
              ~ar5502.are~ ~override~
              ~ar5503.are~ ~override~
              ~ar5506.are~ ~override~
              ~ar5508.are~ ~override~
              ~ar6012.are~ ~override~
              ~ar6111.are~ ~override~
  PATCH_IF (SOURCE_SIZE > 0x11b) THEN BEGIN // protects against invalid files
    READ_ASCII 0x94 "script"
    PATCH_IF (("" STRING_COMPARE_CASE "%script%" = 0) OR ("None" STRING_COMPARE_CASE "%script%" = 0)) BEGIN
      WRITE_EVALUATED_ASCII 0x94 ~%SOURCE_RES%~
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// fix common error of incorrect map note offsets
COPY_EXISTING ~ar0011.are~ ~override~
              ~ar0012.are~ ~override~
              ~ar0013.are~ ~override~
              ~ar0014.are~ ~override~
              ~ar0015.are~ ~override~
              ~ar0016.are~ ~override~
              ~ar0017.are~ ~override~
              ~ar0018.are~ ~override~
              ~ar0020.are~ ~override~
              ~ar0021.are~ ~override~
              ~ar0022.are~ ~override~
              ~ar0028.are~ ~override~
              ~ar0041.are~ ~override~
              ~ar0042.are~ ~override~
              ~ar0043.are~ ~override~
              ~ar0044.are~ ~override~
              ~ar0045.are~ ~override~
              ~ar0046.are~ ~override~
              ~ar0060.are~ ~override~
              ~ar0061.are~ ~override~
              ~ar0062.are~ ~override~
              ~ar0063.are~ ~override~
              ~ar0064.are~ ~override~
              ~ar0065.are~ ~override~
              ~ar0069.are~ ~override~
              ~ar0070.are~ ~override~
              ~ar0071.are~ ~override~
              ~ar0072.are~ ~override~
              ~ar0082.are~ ~override~
              ~ar0083.are~ ~override~
              ~ar0084.are~ ~override~
              ~ar0085.are~ ~override~
              ~ar0086.are~ ~override~
              ~ar0087.are~ ~override~
              ~ar0203.are~ ~override~
              ~ar0206.are~ ~override~
              ~ar0301.are~ ~override~
              ~ar0302.are~ ~override~
              ~ar0303.are~ ~override~
              ~ar0304.are~ ~override~
              ~ar0305.are~ ~override~
              ~ar0306.are~ ~override~
              ~ar0307.are~ ~override~
              ~ar0308.are~ ~override~
              ~ar0309.are~ ~override~
              ~ar0310.are~ ~override~
              ~ar0311.are~ ~override~
              ~ar0312.are~ ~override~
              ~ar0313.are~ ~override~
              ~ar0314.are~ ~override~
              ~ar0315.are~ ~override~
              ~ar0316.are~ ~override~
              ~ar0317.are~ ~override~
              ~ar0318.are~ ~override~
              ~ar0319.are~ ~override~
              ~ar0321.are~ ~override~
              ~ar0322.are~ ~override~
              ~ar0323.are~ ~override~
              ~ar0324.are~ ~override~
              ~ar0325.are~ ~override~
              ~ar0326.are~ ~override~
              ~ar0327.are~ ~override~
              ~ar0328.are~ ~override~
              ~ar0329.are~ ~override~
              ~ar0330.are~ ~override~
              ~ar0331.are~ ~override~
              ~ar0332.are~ ~override~
              ~ar0333.are~ ~override~
              ~ar0334.are~ ~override~
              ~ar0335.are~ ~override~
              ~ar0401.are~ ~override~
              ~ar0402.are~ ~override~
              ~ar0403.are~ ~override~
              ~ar0405.are~ ~override~
              ~ar0407.are~ ~override~
              ~ar0408.are~ ~override~
              ~ar0409.are~ ~override~
              ~ar0410.are~ ~override~
              ~ar0412.are~ ~override~
              ~ar0413.are~ ~override~
              ~ar0414.are~ ~override~
              ~ar0415.are~ ~override~
              ~ar0416.are~ ~override~
              ~ar0417.are~ ~override~
              ~ar0418.are~ ~override~
              ~ar0419.are~ ~override~
              ~ar0420.are~ ~override~
              ~ar0501.are~ ~override~
              ~ar0502.are~ ~override~
              ~ar0503.are~ ~override~
              ~ar0504.are~ ~override~
              ~ar0505.are~ ~override~
              ~ar0506.are~ ~override~
              ~ar0507.are~ ~override~
              ~ar0508.are~ ~override~
              ~ar0510.are~ ~override~
              ~ar0511.are~ ~override~
              ~ar0512.are~ ~override~
              ~ar0513.are~ ~override~
              ~ar0514.are~ ~override~
              ~ar0515.are~ ~override~
              ~ar0516.are~ ~override~
              ~ar0517.are~ ~override~
              ~ar0518.are~ ~override~
              ~ar0519.are~ ~override~
              ~ar0520.are~ ~override~
              ~ar0521.are~ ~override~
              ~ar0523.are~ ~override~
              ~ar0525.are~ ~override~
              ~ar0526.are~ ~override~
              ~ar0527.are~ ~override~
              ~ar0528.are~ ~override~
              ~ar0529.are~ ~override~
              ~ar0530.are~ ~override~
              ~ar0531.are~ ~override~
              ~ar0601.are~ ~override~
              ~ar0604.are~ ~override~
              ~ar0605.are~ ~override~
              ~ar0606.are~ ~override~
              ~ar0607.are~ ~override~
              ~ar0702.are~ ~override~
              ~ar0703.are~ ~override~
              ~ar0704.are~ ~override~
              ~ar0705.are~ ~override~
              ~ar0706.are~ ~override~
              ~ar0707.are~ ~override~
              ~ar0708.are~ ~override~
              ~ar0709.are~ ~override~
              ~ar0710.are~ ~override~
              ~ar0711.are~ ~override~
              ~ar0712.are~ ~override~
              ~ar0713.are~ ~override~
              ~ar0714.are~ ~override~
              ~ar0802.are~ ~override~
              ~ar0803.are~ ~override~
              ~ar0804.are~ ~override~
              ~ar0805.are~ ~override~
              ~ar0806.are~ ~override~
              ~ar0807.are~ ~override~
              ~ar0809.are~ ~override~
              ~ar0810.are~ ~override~
              ~ar0811.are~ ~override~
              ~ar0812.are~ ~override~
              ~ar0813.are~ ~override~
              ~ar0901.are~ ~override~
              ~ar0902.are~ ~override~
              ~ar0903.are~ ~override~
              ~ar0904.are~ ~override~
              ~ar0905.are~ ~override~
              ~ar0906.are~ ~override~
              ~ar0907.are~ ~override~
              ~ar1001.are~ ~override~
              ~ar1002.are~ ~override~
              ~ar1003.are~ ~override~
              ~ar1004.are~ ~override~
              ~ar1005.are~ ~override~
              ~ar1006.are~ ~override~
              ~ar1007.are~ ~override~
              ~ar1008.are~ ~override~
              ~ar1009.are~ ~override~
              ~ar1010.are~ ~override~
              ~ar1101.are~ ~override~
              ~ar1102.are~ ~override~
              ~ar1103.are~ ~override~
              ~ar1104.are~ ~override~
              ~ar1105.are~ ~override~
              ~ar1106.are~ ~override~
              ~ar1107.are~ ~override~
              ~ar1201.are~ ~override~
              ~ar1203.are~ ~override~
              ~ar1204.are~ ~override~
              ~ar1304.are~ ~override~
              ~ar1305.are~ ~override~
              ~ar1306.are~ ~override~
              ~ar1307.are~ ~override~
              ~ar1402.are~ ~override~
              ~ar1403.are~ ~override~
              ~ar1501.are~ ~override~
              ~ar1502.are~ ~override~
              ~ar1503.are~ ~override~
              ~ar1504.are~ ~override~
              ~ar1505.are~ ~override~
              ~ar1506.are~ ~override~
              ~ar1507.are~ ~override~
              ~ar1508.are~ ~override~
              ~ar1509.are~ ~override~
              ~ar1510.are~ ~override~
              ~ar1511.are~ ~override~
              ~ar1513.are~ ~override~
              ~ar1601.are~ ~override~
              ~ar1602.are~ ~override~
              ~ar1603.are~ ~override~
              ~ar1604.are~ ~override~
              ~ar1605.are~ ~override~
              ~ar1606.are~ ~override~
              ~ar1607.are~ ~override~
              ~ar1608.are~ ~override~
              ~ar1609.are~ ~override~
              ~ar1610.are~ ~override~
              ~ar1611.are~ ~override~
              ~ar1612.are~ ~override~
              ~ar1613.are~ ~override~
              ~ar1700.are~ ~override~
              ~ar1800.are~ ~override~
              ~ar1901.are~ ~override~
              ~ar1902.are~ ~override~
              ~ar1904.are~ ~override~
              ~ar1905.are~ ~override~
              ~ar2001.are~ ~override~
              ~ar2002.are~ ~override~
              ~ar2006.are~ ~override~
              ~ar2008.are~ ~override~
              ~ar2009.are~ ~override~
              ~ar2010.are~ ~override~
              ~ar2011.are~ ~override~
              ~ar2012.are~ ~override~
              ~ar2013.are~ ~override~
              ~ar2014.are~ ~override~
              ~ar2015.are~ ~override~
              ~ar2016.are~ ~override~
              ~ar2017.are~ ~override~
              ~ar2018.are~ ~override~
              ~ar2101.are~ ~override~
              ~ar2201.are~ ~override~
              ~ar2202.are~ ~override~
              ~ar2203.are~ ~override~
              ~ar2204.are~ ~override~
              ~ar2205.are~ ~override~
              ~ar2206.are~ ~override~
              ~ar2207.are~ ~override~
              ~ar2208.are~ ~override~
              ~ar2209.are~ ~override~
              ~ar2210.are~ ~override~
              ~ar2601.are~ ~override~
              ~ar2602.are~ ~override~
              ~ar2603.are~ ~override~
              ~ar2700.are~ ~override~
              ~ar2801.are~ ~override~
              ~ar2802.are~ ~override~
              ~ar2803.are~ ~override~
              ~ar2804.are~ ~override~
              ~ar2805.are~ ~override~
              ~ar2807.are~ ~override~
              ~ar2808.are~ ~override~
              ~ar2810.are~ ~override~
              ~ar2811.are~ ~override~
              ~ar2812.are~ ~override~
              ~ar2901.are~ ~override~
              ~ar2902.are~ ~override~
              ~ar2903.are~ ~override~
              ~ar2904.are~ ~override~
              ~ar2905.are~ ~override~
              ~ar2906.are~ ~override~
              ~ar3004.are~ ~override~
              ~ar3005.are~ ~override~
              ~ar3006.are~ ~override~
              ~ar3007.are~ ~override~
              ~ar3008.are~ ~override~
              ~ar3009.are~ ~override~
              ~ar3010.are~ ~override~
              ~ar3011.are~ ~override~
              ~ar3012.are~ ~override~
              ~ar3013.are~ ~override~
              ~ar3014.are~ ~override~
              ~ar3023.are~ ~override~
              ~ar4000.are~ ~override~
              ~ar5001.are~ ~override~
              ~ar5002.are~ ~override~
              ~ar5003.are~ ~override~
              ~ar5004.are~ ~override~
              ~ar5005.are~ ~override~
              ~ar5006.are~ ~override~
              ~ar5008.are~ ~override~
              ~ar5009.are~ ~override~
              ~ar5010.are~ ~override~
              ~ar5011.are~ ~override~
              ~ar5012.are~ ~override~
              ~ar5014.are~ ~override~
              ~ar5015.are~ ~override~
              ~ar5201.are~ ~override~
              ~ar5202.are~ ~override~
              ~ar5203.are~ ~override~
              ~ar5204.are~ ~override~
              ~ar5501.are~ ~override~
              ~ar5502.are~ ~override~
              ~ar5503.are~ ~override~
              ~ar5504.are~ ~override~
              ~ar5505.are~ ~override~
              ~ar5507.are~ ~override~
              ~ar5508.are~ ~override~
              ~ar5509.are~ ~override~
              ~ar6000.are~ ~override~
              ~ar6001.are~ ~override~
              ~ar6008.are~ ~override~
              ~ar6011.are~ ~override~
              ~ar6012.are~ ~override~
              ~ar6100.are~ ~override~
              ~ar6102.are~ ~override~
              ~ar6103.are~ ~override~
              ~ar6105.are~ ~override~
              ~ar6106.are~ ~override~
              ~ar6107.are~ ~override~
              ~ar6108.are~ ~override~
              ~ar6109.are~ ~override~
              ~ar6110.are~ ~override~
              ~ar6111.are~ ~override~
              ~ar6200.are~ ~override~
              ~ar6300.are~ ~override~
              ~ar6400.are~ ~override~
  READ_LONG  0xc0 "rest_off" ELSE 0
  READ_LONG  0xc4 "note_off" ELSE 0
  READ_LONG  0xc8 "note_num" ELSE 213
  PATCH_IF (("%note_num%" = 0) AND ("%note_off%" != ("%rest_off%" + 0xe4))) BEGIN
    WRITE_LONG 0xc4 ("%rest_off%" + 0xe4)
  END
  BUT_ONLY_IF_IT_CHANGES
  
// if trap is undetectable, undisarmable, and has no script, remove trapped flag
COPY_EXISTING ~ar0311.are~ ~override~
  READ_LONG  0x70 "cont_off"
  READ_SHORT 0x74 "cont_num"
  FOR (index = 0 ; index < cont_num ; index = index + 1) BEGIN
    READ_SHORT ("%cont_off%" + 0x2c + ("%index%" * 0xc0)) "trap_detect"
    READ_SHORT ("%cont_off%" + 0x2e + ("%index%" * 0xc0)) "trap_remove"
    READ_SHORT ("%cont_off%" + 0x30 + ("%index%" * 0xc0)) "trapped"
    READ_ASCII ("%cont_off%" + 0x48 + ("%index%" * 0xc0)) "script"
    PATCH_IF ((("%script%" STRING_COMPARE_CASE "" = 0) OR ("%script%" STRING_COMPARE_CASE "None" = 0)) AND
              ("%trapped%" = 1) AND ("%trap_detect%" > 99) AND ("%trap_remove%" > 99)) BEGIN
      WRITE_SHORT ("%cont_off%" + 0x2c + ("%index%" * 0xc0)) 0
      WRITE_SHORT ("%cont_off%" + 0x2e + ("%index%" * 0xc0)) 0
      WRITE_SHORT ("%cont_off%" + 0x30 + ("%index%" * 0xc0)) 0
      WRITE_ASCII ("%cont_off%" + 0x48 + ("%index%" * 0xc0)) ~~ #8
    END
  END
  BUT_ONLY_IF_IT_CHANGES
  
// removing spurious trap flags
COPY_EXISTING ~ar0327.are~ ~override~
              ~ar0417.are~ ~override~
              ~ar0510.are~ ~override~
  READ_LONG  0x70 "cont_off"
  READ_SHORT 0x74 "cont_num"
  FOR (index = 0 ; index < cont_num ; index = index + 1) BEGIN
    READ_ASCII ("%cont_off%" +        ("%index%" * 0xc0)) "name"
    PATCH_IF (
               (("%SOURCE_RES%" STRING_COMPARE_CASE "ar0327" = 0) AND ("%name%" STRING_COMPARE_CASE "Container 7" = 0)) OR
               (("%SOURCE_RES%" STRING_COMPARE_CASE "ar0417" = 0) AND ("%name%" STRING_COMPARE_CASE "Shelf 1" = 0)) OR
               (("%SOURCE_RES%" STRING_COMPARE_CASE "ar0417" = 0) AND ("%name%" STRING_COMPARE_CASE "Table 1" = 0)) OR
               (("%SOURCE_RES%" STRING_COMPARE_CASE "ar0510" = 0) AND ("%name%" STRING_COMPARE_CASE "Container 4" = 0))
             ) BEGIN
      WRITE_SHORT ("%cont_off%" + 0x2c + ("%index%" * 0xc0)) 0
      WRITE_SHORT ("%cont_off%" + 0x2e + ("%index%" * 0xc0)) 0
      WRITE_SHORT ("%cont_off%" + 0x30 + ("%index%" * 0xc0)) 0
      WRITE_ASCII ("%cont_off%" + 0x48 + ("%index%" * 0xc0)) ~~ #8
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~aerbod01.cre~ ~override~
  READ_LONG  0x2a0 "known_off"
  READ_LONG  0x2a4 "known_num"
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "sppr102" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 0 // correct spell level
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~alynar.cre~   ~override~
              ~bounha02.cre~ ~override~
              ~bounha03.cre~ ~override~
              ~cadril.cre~   ~override~
              ~crolus.cre~   ~override~
              ~demson.cre~   ~override~
              ~franco.cre~   ~override~
              ~hurgisr.cre~  ~override~
              ~irlana.cre~   ~override~
              ~jaerto1.cre~  ~override~
              ~jaerto2.cre~  ~override~
              ~jaerto4.cre~  ~override~
              ~jaertof.cre~  ~override~
              ~kayl1.cre~    ~override~
              ~kayl2.cre~    ~override~
              ~plgran01.cre~ ~override~
              ~plshkn01.cre~ ~override~
              ~plshkn02.cre~ ~override~
              ~vakg02.cre~   ~override~
              ~vakg04.cre~   ~override~
  READ_LONG  0x2a0 "known_off"
  READ_LONG  0x2a4 "known_num"
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF (("%resref%" STRING_COMPARE_CASE "spin111" = 0) OR
              ("%resref%" STRING_COMPARE_CASE "spin113" = 0)) BEGIN
      WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 2 // correct spell type
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~amelm01.cre~  ~override~
              ~e35.cre~      ~override~
              ~jatermin.cre~ ~override~
  READ_LONG  0x2a0 "known_off" ELSE 0
  READ_LONG  0x2a4 "known_num" ELSE 0
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spwi108" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 0 // correct spell level
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~ar18fam.cre~  ~override~
              ~elemep01.cre~ ~override~
              ~elemep02.cre~ ~override~
              ~elemep04.cre~ ~override~
              ~elemep05.cre~ ~override~
              ~elemep06.cre~ ~override~
              ~elemep07.cre~ ~override~
              ~elemep08.cre~ ~override~
              ~famcat.cre~   ~override~
              ~famcat25.cre~ ~override~
              ~famdust.cre~  ~override~
              ~famfair.cre~  ~override~
              ~famfer.cre~   ~override~
              ~famfer25.cre~ ~override~
              ~famfire.cre~  ~override~
              ~famimp.cre~   ~override~
              ~famimp25.cre~ ~override~
              ~famlight.cre~ ~override~
              ~fammist.cre~  ~override~
              ~famrab.cre~   ~override~
              ~famrab25.cre~ ~override~
              ~famrad.cre~   ~override~
              ~fsridd.cre~   ~override~
              ~gorimp01.cre~ ~override~
              ~gpfam1.cre~   ~override~
              ~imp01.cre~    ~override~
              ~impqua01.cre~ ~override~
              ~mddust.cre~   ~override~
              ~mepdus01.cre~ ~override~
              ~mepear01.cre~ ~override~
              ~mepfir01.cre~ ~override~
              ~mepice01.cre~ ~override~
              ~mepice02.cre~ ~override~
              ~meplig01.cre~ ~override~
              ~mepmag01.cre~ ~override~
              ~mepmag02.cre~ ~override~
              ~mepmin01.cre~ ~override~
              ~mepmis01.cre~ ~override~
              ~mepooz01.cre~ ~override~
              ~meprad01.cre~ ~override~
              ~meprad02.cre~ ~override~
              ~mepste01.cre~ ~override~
              ~obsfir02.cre~ ~override~
              ~obsfir03.cre~ ~override~
              ~obsice02.cre~ ~override~
              ~rumar03.cre~  ~override~
              ~sahimp01.cre~ ~override~
              ~sahimp02.cre~ ~override~
              ~sahimp03.cre~ ~override~
              ~sahimp04.cre~ ~override~
              ~sahimp05.cre~ ~override~
              ~sahimp06.cre~ ~override~
              ~sahimp07.cre~ ~override~
              ~telimp1.cre~  ~override~
              ~telqua1.cre~  ~override~
              ~telqua2.cre~  ~override~
              ~udimp.cre~    ~override~
  READ_LONG  0x2a0 "known_off" ELSE 0
  READ_LONG  0x2a4 "known_num" ELSE 0
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spwi201" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 1 // correct spell level
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~bheye.cre~ ~override~
  READ_LONG  0x2a0 "known_off"
  READ_LONG  0x2a4 "known_num"
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spwi605" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 5 // correct spell level
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~cuardul.cre~  ~override~
              ~pries18c.cre~ ~override~
  READ_LONG  0x2a0 "known_off"
  READ_LONG  0x2a4 "known_num"
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spwi602" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 1 // correct spell type
    END
  END
  BUT_ONLY_IF_IT_CHANGES


// known spells listed with incorrect level/type
COPY_EXISTING ~elemep03.cre~ ~override~
              ~mepsal01.cre~ ~override~
  READ_LONG  0x2a0 "known_off"
  READ_LONG  0x2a4 "known_num"
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spwi201" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 1 // correct spell level
    END ELSE
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spin934" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 2 // correct spell type
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~eyeded01.cre~ ~override~
  READ_LONG  0x2a0 "known_off" ELSE 0
  READ_LONG  0x2a4 "known_num" ELSE 0
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF (("%resref%" STRING_COMPARE_CASE "spwi314" = 0) OR
              ("%resref%" STRING_COMPARE_CASE "spwi501" = 0)) BEGIN
      WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 1 // correct spell type
    END ELSE
    PATCH_IF (("%resref%" STRING_COMPARE_CASE "sppr707" = 0) OR
              ("%resref%" STRING_COMPARE_CASE "sppr708" = 0)) BEGIN
      WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 0 // correct spell type
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~mepsmo01.cre~ ~override~
              ~mepsmo02.cre~ ~override~
              ~obsfir04.cre~ ~override~
  READ_LONG  0x2a0 "known_off"
  READ_LONG  0x2a4 "known_num"
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spwi206" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 1 // correct spell level
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~merlin.cre~ ~override~
  READ_LONG  0x2a0 "known_off"
  READ_LONG  0x2a4 "known_num"
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF (("%resref%" STRING_COMPARE_CASE "sppr731" = 0) OR
              ("%resref%" STRING_COMPARE_CASE "sppr732" = 0)) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 0 // correct spell level
      WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 2 // correct spell type
    END ELSE
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spwi108" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 0 // correct spell level
    END ELSE
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spcl922" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 6 // correct spell level
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~nalia18.cre~ ~override~
  READ_LONG  0x2a0 "known_off" ELSE 0
  READ_LONG  0x2a4 "known_num" ELSE 0
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spwi805" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 7 // correct spell level
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~nalin.cre~ ~override~
  READ_LONG  0x2a0 "known_off"
  READ_LONG  0x2a4 "known_num"
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spin102" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 2 // correct spell type
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~pcapt06.cre~ ~override~
  READ_LONG  0x2a0 "known_off"
  READ_LONG  0x2a4 "known_num"
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "sppr315" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 2 // correct spell level
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~spidfgsu.cre~ ~override~
  READ_LONG  0x2a0 "known_off"
  READ_LONG  0x2a4 "known_num"
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spin683" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 0 // correct spell level
      WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 2 // correct spell type
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// known spells listed with incorrect level/type
COPY_EXISTING ~udardul.cre~  ~override~
  READ_LONG  0x2a0 "known_off"
  READ_LONG  0x2a4 "known_num"
  FOR (index = 0 ; index < known_num ; index = index + 1) BEGIN
    READ_ASCII ("%known_off%" +        ("%index%" * 0x0c)) "resref"
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spwi602" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 1 // correct spell type
    END ELSE
    PATCH_IF ("%resref%" STRING_COMPARE_CASE "spin698" = 0) BEGIN
      WRITE_SHORT ("%known_off%" + 0x08 + ("%index%" * 0x0c)) 0 // correct spell level
      WRITE_SHORT ("%known_off%" + 0x0a + ("%index%" * 0x0c)) 2 // correct spell type
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// cleans up DLTCEP error messages
COPY_EXISTING ~BALSHLD.SPL~  ~override~
              ~BALTH03.SPL~  ~override~
              ~BALTH05.SPL~  ~override~
              ~BHAAL3A.SPL~  ~override~
              ~BHAAL4A.SPL~  ~override~
              ~CH3DRAIN.SPL~ ~override~
              ~DRGRBRHT.SPL~ ~override~
              ~JWFALL.SPL~   ~override~
              ~JWONEHIT.SPL~ ~override~
              ~JWSP02.SPL~   ~override~
              ~LICHTEL.SPL~  ~override~
              ~SAREVEFF.SPL~ ~override~
              ~SENSPISU.SPL~ ~override~
              ~spcl121.spl~  ~override~
              ~spcl133.spl~  ~override~
              ~spcl144.spl~  ~override~
              ~spcl235.spl~  ~override~
              ~spcl351.spl~  ~override~
              ~spcl423.spl~  ~override~
              ~spcl521.spl~  ~override~
              ~spcl522.spl~  ~override~
              ~spcl542.spl~  ~override~
              ~spcl613.spl~  ~override~
              ~spcl641.spl~  ~override~
              ~spcl731.spl~  ~override~
              ~spcl751.spl~  ~override~
              ~spcl751a.spl~ ~override~
              ~spcl811.spl~  ~override~
              ~spcl814.spl~  ~override~
              ~spcl820.spl~  ~override~
              ~spcl900.spl~  ~override~
              ~spcl901.spl~  ~override~
              ~spcl902.spl~  ~override~
              ~spcl903.spl~  ~override~
              ~spcl904.spl~  ~override~
              ~spcl905.spl~  ~override~
              ~spcl906.spl~  ~override~
              ~spcl907.spl~  ~override~
              ~spcl909.spl~  ~override~
              ~spcl910.spl~  ~override~
              ~spcl915.spl~  ~override~
              ~spcl916.spl~  ~override~
              ~spcl918.spl~  ~override~
              ~spcl919.spl~  ~override~
              ~spcl920.spl~  ~override~
              ~spcl921.spl~  ~override~
              ~spcl928.spl~  ~override~
              ~spcl929.spl~  ~override~
              ~spcl930.spl~  ~override~
              ~spdr101.spl~  ~override~
              ~spin104a.spl~ ~override~
              ~spin122.spl~  ~override~
              ~spin123.spl~  ~override~
              ~spin124.spl~  ~override~
              ~spin150.spl~  ~override~
              ~spin151.spl~  ~override~
              ~spin530.spl~  ~override~
              ~spin531.spl~  ~override~
              ~spin532.spl~  ~override~
              ~spin534.spl~  ~override~
              ~spin540.spl~  ~override~
              ~spin553.spl~  ~override~
              ~spin554.spl~  ~override~
              ~spin555.spl~  ~override~
              ~spin556.spl~  ~override~
              ~spin557.spl~  ~override~
              ~spin571.spl~  ~override~
              ~spin576.spl~  ~override~
              ~spin581.spl~  ~override~
              ~spin582.spl~  ~override~
              ~spin583.spl~  ~override~
              ~spin584.spl~  ~override~
              ~spin585.spl~  ~override~
              ~spin586.spl~  ~override~
              ~spin587.spl~  ~override~
              ~spin588.spl~  ~override~
              ~spin589.spl~  ~override~
              ~spin590.spl~  ~override~
              ~spin591.spl~  ~override~
              ~spin594.spl~  ~override~
              ~spin595.spl~  ~override~
              ~spin596.spl~  ~override~
              ~spin611.spl~  ~override~
              ~spin612.spl~  ~override~
              ~spin613.spl~  ~override~
              ~spin615.spl~  ~override~
              ~spin616.spl~  ~override~
              ~spin641.spl~  ~override~
              ~spin644.spl~  ~override~
              ~spin647.spl~  ~override~
              ~spin648.spl~  ~override~
              ~spin661.spl~  ~override~
              ~spin662.spl~  ~override~
              ~spin663.spl~  ~override~
              ~spin670.spl~  ~override~
              ~spin672.spl~  ~override~
              ~spin681.spl~  ~override~
              ~spin682.spl~  ~override~
              ~spin691.spl~  ~override~
              ~spin693.spl~  ~override~
              ~spin706.spl~  ~override~
              ~spin708.spl~  ~override~
              ~spin718.spl~  ~override~
              ~spin720.spl~  ~override~
              ~spin721.spl~  ~override~
              ~spin726.spl~  ~override~
              ~spin727.spl~  ~override~
              ~spin732.spl~  ~override~
              ~spin747.spl~  ~override~
              ~spin748.spl~  ~override~
              ~spin749.spl~  ~override~
              ~spin750.spl~  ~override~
              ~spin751.spl~  ~override~
              ~spin752.spl~  ~override~
              ~spin753.spl~  ~override~
              ~spin754.spl~  ~override~
              ~spin755.spl~  ~override~
              ~spin756.spl~  ~override~
              ~spin759.spl~  ~override~
              ~spin760.spl~  ~override~
              ~spin761.spl~  ~override~
              ~spin762.spl~  ~override~
              ~spin763.spl~  ~override~
              ~spin764.spl~  ~override~
              ~spin765.spl~  ~override~
              ~spin766.spl~  ~override~
              ~spin767.spl~  ~override~
              ~spin770.spl~  ~override~
              ~spin771.spl~  ~override~
              ~spin773.spl~  ~override~
              ~spin782.spl~  ~override~
              ~spin784.spl~  ~override~
              ~spin789.spl~  ~override~
              ~spin810.spl~  ~override~
              ~spin820.spl~  ~override~
              ~spin823.spl~  ~override~
              ~spin825.spl~  ~override~
              ~spin829.spl~  ~override~
              ~spin832.spl~  ~override~
              ~spin833.spl~  ~override~
              ~spin834.spl~  ~override~
              ~spin836.spl~  ~override~
              ~spin837.spl~  ~override~
              ~spin838.spl~  ~override~
              ~spin846.spl~  ~override~
              ~spin848.spl~  ~override~
              ~spin853.spl~  ~override~
              ~spin868.spl~  ~override~
              ~spin869.spl~  ~override~
              ~spin874.spl~  ~override~
              ~spin875.spl~  ~override~
              ~spin876.spl~  ~override~
              ~spin878.spl~  ~override~
              ~spin879.spl~  ~override~
              ~spin881.spl~  ~override~
              ~spin891.spl~  ~override~
              ~spin893.spl~  ~override~
              ~spin916.spl~  ~override~
              ~spin927.spl~  ~override~
              ~spin934.spl~  ~override~
              ~spin935.spl~  ~override~
              ~spin936.spl~  ~override~
              ~spin957.spl~  ~override~
              ~spin959.spl~  ~override~
              ~spin965.spl~  ~override~
              ~spin973.spl~  ~override~
              ~spin995.spl~  ~override~
              ~spinhum.spl~  ~override~
              ~sppr202.spl~  ~override~
              ~sppr203.spl~  ~override~
              ~sppr206.spl~  ~override~
              ~sppr313.spl~  ~override~
              ~sppr412.spl~  ~override~
              ~sppr515d.spl~ ~override~
              ~sppr599.spl~  ~override~
              ~sppr712.spl~  ~override~
              ~sppr713.spl~  ~override~
              ~sppr719.spl~  ~override~
              ~sppr731.spl~  ~override~
              ~sppr732.spl~  ~override~
              ~spwi108.spl~  ~override~
              ~spwi118.spl~  ~override~
              ~spwi124.spl~  ~override~
              ~spwi210.spl~  ~override~
              ~spwi211.spl~  ~override~
              ~spwi299.spl~  ~override~
              ~spwi303.spl~  ~override~
              ~spwi314a.spl~ ~override~
              ~spwi319.spl~  ~override~
              ~spwi320.spl~  ~override~
              ~spwi325.spl~  ~override~
              ~spwi411.spl~  ~override~
              ~spwi489.spl~  ~override~
              ~spwi490.spl~  ~override~
              ~spwi491.spl~  ~override~
              ~spwi517.spl~  ~override~
              ~spwi518.spl~  ~override~
              ~spwi607.spl~  ~override~
              ~spwi703.spl~  ~override~
              ~spwi712.spl~  ~override~
              ~spwi714.spl~  ~override~
              ~spwi804.spl~  ~override~
              ~spwi817.spl~  ~override~
              ~spwi818.spl~  ~override~
              ~spwi888.spl~  ~override~
              ~spwi897.spl~  ~override~
              ~spwi913.spl~  ~override~
              ~spwi915.spl~  ~override~
              ~spwi918.spl~  ~override~
              ~spwi921.spl~  ~override~
              ~spwi922.spl~  ~override~
              ~spwi924.spl~  ~override~
              ~spwi925.spl~  ~override~
              ~spwi941.spl~  ~override~
              ~spwi942.spl~  ~override~
              ~spwi944.spl~  ~override~
              ~spwi945.spl~  ~override~
              ~spwi946.spl~  ~override~
              ~spwi947.spl~  ~override~
              ~spwi949.spl~  ~override~
              ~spwi951.spl~  ~override~
              ~spwi961.spl~  ~override~
              ~spwi962.spl~  ~override~
              ~spwi963.spl~  ~override~
              ~spwi964.spl~  ~override~
              ~spwi965.spl~  ~override~
              ~spwi983.spl~  ~override~
              ~spwi987.spl~  ~override~
              ~spwi988.spl~  ~override~
              ~spwi990.spl~  ~override~
              ~spwi991.spl~  ~override~
              ~spwi992.spl~  ~override~
              ~spwi993.spl~  ~override~
              ~spwish11.spl~ ~override~
              ~spwish12.spl~ ~override~
              ~spwish13.spl~ ~override~
              ~spwish14.spl~ ~override~
              ~spwish16.spl~ ~override~
              ~spwish17.spl~ ~override~
              ~spwish46.spl~ ~override~
              ~spwm101d.spl~ ~override~
              ~spwm108.spl~  ~override~
              ~spwm109.spl~  ~override~
              ~spwm117.spl~  ~override~
              ~spwm159.spl~  ~override~
              ~spwm162.spl~  ~override~
              ~spwm188.spl~  ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) THEN BEGIN // protects against invalid files
    READ_LONG  0x64 "abil_off"
    READ_SHORT 0x68 "abil_num"
    READ_LONG  0x6a "fx_off"
    READ_SHORT 0x70 "fx_num"
    PATCH_IF ("%abil_num%" > 0) BEGIN
      READ_SHORT ("%abil_off%" + 0x1e + (0x28 * ("%abil_num%" - 1))) "abil_fx_num"
      READ_SHORT ("%abil_off%" + 0x20 + (0x28 * ("%abil_num%" - 1))) "abil_fx_idx"
      SET "fx_num" = ("%abil_fx_idx%" + "%abil_fx_num%")
    END
    WHILE ("%fx_num%" > 0) BEGIN
      SET "fx_num" = ("%fx_num%" - 1)
      READ_BYTE ("%fx_off%" + 0x0c + (0x30 * "%fx_num%")) "timing"
      PATCH_IF (("%timing%" = 1) OR ("%timing%" = 9)) BEGIN
        WRITE_LONG ("%fx_off%" + 0x0e + (0x30 * "%fx_num%")) 0 // duration
      END
    END
  END
  BUT_ONLY_IF_IT_CHANGES

// detectable spells goes here--once it's done

//blank music file
COPY ~bg2fixpack/mus/G3Blank.mus~ ~music/G3Blank.mus~
  
// strips extraneous default(0) abiity headers from items to prevent nishruu eating
COPY_EXISTING ~amul18.itm~   ~override~
              ~amul27.itm~   ~override~
              ~belt04.itm~   ~override~
              ~belt05.itm~   ~override~
              ~belt07.itm~   ~override~
              ~belt08.itm~   ~override~
              ~belt10.itm~   ~override~
              ~bow19a.itm~   ~override~
              ~bow19b.itm~   ~override~
              ~brac01.itm~   ~override~
              ~brac02.itm~   ~override~
              ~brac03.itm~   ~override~
              ~brac08.itm~   ~override~
              ~brac11.itm~   ~override~
              ~brac13.itm~   ~override~
              ~brac14.itm~   ~override~
              ~brac18.itm~   ~override~
              ~btest1.itm~   ~override~
              ~chan01.itm~   ~override~
              ~chan02.itm~   ~override~
              ~chan03.itm~   ~override~
              ~chan06.itm~   ~override~
              ~chan07.itm~   ~override~
              ~chan08.itm~   ~override~
              ~chan12.itm~   ~override~
              ~chan13.itm~   ~override~
              ~clck01.itm~   ~override~
              ~clck03.itm~   ~override~
              ~clck05.itm~   ~override~
              ~clck10.itm~   ~override~
              ~clck11.itm~   ~override~
              ~clck12.itm~   ~override~
              ~clck13.itm~   ~override~
              ~clck14.itm~   ~override~
              ~clck15.itm~   ~override~
              ~clck16.itm~   ~override~
              ~clck17.itm~   ~override~
              ~clck18.itm~   ~override~
              ~clck19.itm~   ~override~
              ~clck22.itm~   ~override~
              ~clck23.itm~   ~override~
              ~clolth.itm~   ~override~
              ~demilich.itm~ ~override~
              ~dwchan01.itm~ ~override~
              ~finmel01.itm~ ~override~
              ~globblu3.itm~ ~override~
              ~globgre1.itm~ ~override~
              ~globpur3.itm~ ~override~
              ~globred4.itm~ ~override~
              ~halb09a.itm~  ~override~
              ~halb09b.itm~  ~override~
              ~hgwra02.itm~  ~override~
              ~jwsuper.itm~  ~override~
              ~key24.itm~    ~override~
              ~key27.itm~    ~override~
              ~key28.itm~    ~override~
              ~leat04.itm~   ~override~
              ~leat15.itm~   ~override~
              ~leat16.itm~   ~override~
              ~lich.itm~     ~override~
              ~mdk2ring.itm~ ~override~
              ~misc4y.itm~   ~override~
              ~misc5f.itm~   ~override~
              ~misc8u.itm~   ~override~
              ~misc97.itm~   ~override~
              ~misc9h.itm~   ~override~
              ~misca2.itm~   ~override~
              ~misca3.itm~   ~override~
              ~misca4.itm~   ~override~
              ~misca7.itm~   ~override~
              ~misca9.itm~   ~override~
              ~miscac.itm~   ~override~
              ~miscae.itm~   ~override~
              ~miscaf.itm~   ~override~
              ~miscag.itm~   ~override~
              ~miscah.itm~   ~override~
              ~miscaj.itm~   ~override~
              ~miscak.itm~   ~override~
              ~miscal.itm~   ~override~
              ~miscao.itm~   ~override~
              ~miscap.itm~   ~override~
              ~miscaq.itm~   ~override~
              ~miscar.itm~   ~override~
              ~miscas.itm~   ~override~
              ~miscat.itm~   ~override~
              ~miscb1.itm~   ~override~
              ~miscb2.itm~   ~override~
              ~miscb4.itm~   ~override~
              ~miscb5.itm~   ~override~
              ~miscb6.itm~   ~override~
              ~miscb7.itm~   ~override~
              ~miscb8.itm~   ~override~
              ~miscb9.itm~   ~override~
              ~miscba.itm~   ~override~
              ~miscbr.itm~   ~override~
              ~miscbs.itm~   ~override~
              ~npclck.itm~   ~override~
              ~plot02a.itm~  ~override~
              ~plot02b.itm~  ~override~
              ~plot02c.itm~  ~override~
              ~plot02d.itm~  ~override~
              ~plot02e.itm~  ~override~
              ~plot03a.itm~  ~override~
              ~plot03b.itm~  ~override~
              ~plot03c.itm~  ~override~
              ~plot03d.itm~  ~override~
              ~plot04i.itm~  ~override~
              ~plot05a.itm~  ~override~
              ~plot05b.itm~  ~override~
              ~plot05c.itm~  ~override~
              ~plot05d.itm~  ~override~
              ~potn44.itm~   ~override~
              ~ption2k.itm~  ~override~
              ~ption2l.itm~  ~override~
              ~ption2m.itm~  ~override~
              ~ption2n.itm~  ~override~
              ~ption41.itm~  ~override~
              ~ravag02.itm~  ~override~
              ~ravag03.itm~  ~override~
              ~ring02.itm~   ~override~
              ~ring04.itm~   ~override~
              ~ring21.itm~   ~override~
              ~ring23.itm~   ~override~
              ~ring25.itm~   ~override~
              ~ring37.itm~   ~override~
              ~ring38.itm~   ~override~
              ~rossring.itm~ ~override~
              ~sarbone.itm~  ~override~
              ~sarskel.itm~  ~override~
              ~sarskul.itm~  ~override~
              ~scaleb.itm~   ~override~
              ~scaler.itm~   ~override~
              ~scrla9.itm~   ~override~
              ~scrlaa.itm~   ~override~
              ~scrlac.itm~   ~override~
              ~scrlad.itm~   ~override~
              ~scrlae.itm~   ~override~
              ~sw1h54a.itm~  ~override~
              ~sw1h54b.itm~  ~override~
              ~sw2h15a.itm~  ~override~
              ~tbag01.itm~   ~override~
  PATCH_IF (SOURCE_SIZE > 0x71) THEN BEGIN // protects against invalid files
    READ_LONG   0x64 "abil_off"
    READ_SHORT  0x68 "abil_num"
    READ_LONG   0x6a "fx_off"
    READ_SHORT  0x70 "fx_num"
    SET "fx_delta" = 0
    FOR (index = 0 ; index < abil_num ; index = index + 1) BEGIN // looks for default ability header
      READ_BYTE   ("%abil_off%" +        ("%index%" * 0x38)) "type"
      PATCH_IF ("%type%" = 0) BEGIN // default ability check
        READ_SHORT  (0x1e + "%abil_off%" + ("%index%" * 0x38)) "abil_fx_num"
        READ_SHORT  (0x20 + "%abil_off%" + ("%index%" * 0x38)) "abil_fx_idx"
        DELETE_BYTES ("%fx_off%" + (0x30 * ("%abil_fx_idx%" - "%fx_delta%"))) (0x30 * "%abil_fx_num%") // deletes all associated effects
        DELETE_BYTES ("%abil_off%" + ("%index%" * 0x38)) 0x38                                          // deletes ability itself
        SET "fx_delta" = ("%fx_delta%" + "%abil_fx_num%")
        SET "abil_num" = ("%abil_num%" - 1)
        SET "index" = ("%index%" - 1)
        SET "fx_off" = ("%fx_off%" - 0x38)
      END ELSE BEGIN // if non-melee ability, need to adjust effect indices
        READ_SHORT  (0x20 + "%abil_off%" + ("%index%" * 0x38)) "abil_fx_idx"
        WRITE_SHORT (0x20 + "%abil_off%" + ("%index%" * 0x38)) ("%abil_fx_idx%" - "%fx_delta%")
      END
    END
    WRITE_SHORT  0x68 "%abil_num%"
    WRITE_LONG   0x6a "%fx_off%"
  END
  BUT_ONLY_IF_IT_CHANGES
